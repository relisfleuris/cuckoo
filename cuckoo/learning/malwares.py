import pandas
from pandas.tools.plotting import scatter_matrix
import matplotlib.pyplot as plt
import pickle			#dump dos valores??????
import random
import os
from sklearn import model_selection
from sklearn.metrics import classification_report
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis
from sklearn.naive_bayes import GaussianNB
from sklearn.svm import SVC
from cuckoo.misc import cwd, version, decide_cwd

#CreateMutex (B) and OpenMutex (H)
PARAMETERS = ["CreateFile", "CreateProcess", "CreateRemoteThread",
         "CreateService", "DeleteFile", "FindWindow",
         "OpenSCManager", "ReadFile", "ReadProcessMemory", "RegDeleteKey",
         "RegEnumKey", "RegEnumValue", "RegOpenKey", "ShellExecute",
         "TerminateProcess", "URLDownloadToFile", "WriteFile", "WriteProcessMemory",
		 "NumberProcess", "NumberDroppedFiles", "NumberHosts" , "Entropy" ,"CreateMutex", "OpenMutex","class"]


DATASET = '/home/cuckoo/vmt/cuckoo/storage/learning/worms.data'

class MalwareDetect:
    def __init__(self):
        #self.dataset_path = dataset_path
        #self.parameters = parameters
        self.X_train, self.X_validation, self.Y_train, self.Y_validation = None, None, None, None#self.preparate_dataset(dataset_path, parameters)
    '''
        This function uses the dataset to train the values, to use it in
        others ML algorithms

        *return:
            1 - X_train       (Parameters - The part of dataset that will be use to train the machine learning)
            2 - X_validation  (Parameters - The part of dataset that will be use to validate the ML algorithms)
            3 - Y_train       (Answer - The part of dataset that will be use to train the machine learning)
            4 - Y_validation  (Answer - The part of dataset that will be use to validate the ML algorithms)
    '''
    def preparate_dataset(self, dataset_path, parameters):
        dataset = pandas.read_csv(dataset_path, names=parameters, index_col=False)
        array_values = dataset.values
        #print(len(self.parameters))
        X = array_values[:,0:len(parameters)-3] 	# all parameters
        #print sum(X[:,len(parameters)-2])
        Y = array_values[:,len(parameters)-1]		# answers (class)
        validation_size = 0.15
        seed = random.randrange(0,100)
        #(X_train, X_validation, Y_train, Y_validation)
        self.X_train, self.X_validation, self.Y_train, self.Y_validation = model_selection.train_test_split(X, Y, test_size=validation_size, random_state=seed)


    '''
        This function will return all results from algorithms for this dataset
        *return:
            1 - result
    '''
    def accuracy_machine_learning_algorithms(self):
        if self.X_train is None:
            print('You need to preparate the dataset to see the accuracy')
            return
        models = self.ml_models()
        results = []
        names = []
        seed = random.randrange(0,100)
        scoring = 'accuracy'
        for name, model in models:
            kfold = model_selection.KFold(n_splits=10, random_state=seed)
            cv_results = model_selection.cross_val_score(model, self.X_train, self.Y_train, cv=kfold, scoring=scoring)
            results.append(cv_results)
            #names.append(name)
            msg = "%s: %f (%f)" % (name, cv_results.mean(), cv_results.std())
            print(msg)
            model.fit(self.X_train, self.Y_train)
            predictions = model.predict(self.X_validation)
            #print(accuracy_score(self.Y_validation, predictions))
            #print(confusion_matrix(self.Y_validation, predictions))
            print(classification_report(self.Y_validation, predictions))

    '''
        This function simply return all ML algorithms in sklearn

        *return:
            1 - models (all ML algorithms in sklearn)
    '''
    def ml_models(self):
        models = []
        models.append(('LR', LogisticRegression()))
        models.append(('LDA', LinearDiscriminantAnalysis()))
        models.append(('KNN', KNeighborsClassifier()))
        models.append(('CART', DecisionTreeClassifier()))
        models.append(('NB', GaussianNB()))
        models.append(('SVM', SVC()))
        return models
    '''
        This function persist the machine learning data
        *input:
            1 - filename
        *return:
            1 - models (all ML algorithms in sklearn)
    '''
    def persist_ml(self, ml_algorithm_name):
        # save the model to disk
        # filename = "CART.mlf"
        # print(models[2][1])
        models = self.ml_models()
        for name, model in models:
            if name in ml_algorithm_name.upper():
                cart = model.fit(self.X_train, self.Y_train)
                self.learning_path = '/home/cuckoo/vmt/cuckoo/storage/learning/'#cwd("storage", "learning")
                dspath = os.path.join(self.learning_path, name+".ml")
                pickle.dump(cart, open(dspath, 'wb'))

    def predict(self, filename, data):
        print filename
        loaded_model = pickle.load(open(filename, 'rb'))
        predictions = loaded_model.predict(data)
        return predictions
        #print(accuracy_score(self.Y_validation, predictions))
        #print(confusion_matrix(Y_validation, predictions))
        #print(classification_report(self.Y_validation, predictions))

    def prediction_matrix(self, filename):
        loaded_model = pickle.load(open(filename, 'rb'))
        #loaded_model.fit(X_train, Y_train)
        predictions = loaded_model.predict(self.X_validation)
        print(accuracy_score(self.Y_validation, predictions))
        print(confusion_matrix(self.Y_validation, predictions))
        print(classification_report(self.Y_validation, predictions))

if __name__ == '__main__':
    mdetect = MalwareDetect()
    learning_path = '/home/cuckoo/vmt/cuckoo/storage/learning/'#cwd("storage", "learning")
    print learning_path
    dataset_path = os.path.join(learning_path, "worms.data")
    print dataset_path
    mdetect.preparate_dataset(dataset_path, PARAMETERS)
    #x_t, x_v, y_t, y_v = mdetect.preparate_dataset()
    mdetect.accuracy_machine_learning_algorithms()
    #mdetect.prediction_matrix(dataset_path)
    mdetect.persist_ml('CART')
    dspath = os.path.join(learning_path, "predict")

    #mdetect.predict(dspath, [[131,0,1,0,0,68,717,0,0,5794,0,0,0,0,14617,1,6,0,140,0,5,44]])
